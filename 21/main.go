package main

import "fmt"

/*

Паттерн Adapter -- паттерн проектирования, который помогает использовать уже написанный код для выполнения какой-либо не совместимой с их структурой задачи.

Я решил для примера использования привести ситуацию, когда необходимо сделать централизованную отправку сообщения через единый метод, при наличии нескольких несовместимых с интерфейсом клиента интерфейсов юзеров конкретного приложения.

Из плюсов можно выделить :
	+ Удобное переиспользование кода -- мой пример, в принципе, подходит
	+ Взаимозаменяемость -- например, в работе с БД. Через адаптер можно использовать разные СУБД, меняя их.

Главный минус -- усложнение кода.
Если через адаптер пытаться объединить много несовместимых между собой интефейсов, это может повлиять на увеличение кода, прокидывание структур в адаптер, и создания конструктора каждого из адаптеров.

Также это повлияет и на скорость работы системы, и на отладку её работы.


*/

func main() {

	ids := []int{67128914, 999888, 52361842049}

	// Для каждого из юзеров создадим адаптер и попробуем вызвать клиентский метод отправки сообщения для каждого из ID -- на корректные выведится сообщения об успехе, на некорректные -- об ошибке.

	telegramUser := NewTelegramAdapter(&TelegramUser{})

	for _, id := range ids {
		telegramUser.SendMessage(id)
	}

	fmt.Println()

	whatsAppUser := NewWhatsAppAdapter(&WhatsAppUser{})

	for _, id := range ids {
		whatsAppUser.SendMessage(id)
	}

	fmt.Println()

	vkUser := NewVkAdapter(&VKUser{})

	for _, id := range ids {
		vkUser.SendMessage(id)
	}

}
